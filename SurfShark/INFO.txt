Core - PURE MVC
Network - Network stuff
Resources - Images
UI - Visual Components
ReusableCode = librarys I made over time.



        private void ProcessMessage(BaseSocket bs)
        {
            int module = bs.module;
            int cmd = bs.cmd;
            string value = bs.value.ToString().Trim(); // can be json
            switch (module)
            {
                case 0: //Recived login
                    DefaultResponse dr = null;
                    if (value != null && value.Length > 0)
                    {
                        dr = JsonConvert.DeserializeObject<DefaultResponse>(value);
                    }
                    if (dr != null)
                    {
                        if (dr.value == 1)
                        {
                            Statustct.Text = "Connected";
                            this.Minutes.Text = dr.minutes / 60 + " ";
                            Surfed.Text = "" + dr.surfed;
                            User.Text = "" + dr.message;
                            ProgramVars.stat = "Connected";
                            ProgramVars.surfed = "" + dr.surfed;
                            ProgramVars.user = "" + dr.message;
                            ProgramVars.minutes = dr.minutes;
                            ProgramVars.type = dr.type;
                            ProgramVars.regions = dr.regions.Split(',');
                            CoreSystem.userID = dr.uid;
                            ProgramVars.ratioTxt = ProgramVars.type == 0 ? 70 : 100;
                            ProgramVars.typeTxt = ProgramVars.type == 0 ? "Normal Shark" : "Super Shark";
                            MemberTypExd.Text = ProgramVars.typeTxt;
                            CoreSystem.LoggedIn = true;
                            Forms.login.Invoke(new MethodInvoker(delegate ()
                            {
                                Forms.main.Show();
                                Forms.login.Close();
                            }));
                           // Forms.saveLastLogin(LoginDialog.Username, LoginDialog.Password);
                        }
                        else
                        {
                            CoreSystem.LoggedIn = false;
                            MessageBox.Show(dr.message);
                        }
                    }

                    break;

                case 1: //Recived packet from server
                    DefaultResponse drx = JsonConvert.DeserializeObject<DefaultResponse>(value);
                    if (drx != null)
                    {
                        if (drx.value == 1)
                        {
                            DefaultResponse dry = JsonConvert.DeserializeObject<DefaultResponse>(drx.message.ToString());
                            MainProgram.counter = dry.seconds;
                            MainProgram.counterMax = dry.seconds;
                            MainProgram.Minutes = dry.minutes;
                            MainProgram.reward = dry.seconds;
                            CTimedEvent(dry.seconds, dry.link);
                            this.Minutes.Text = MainProgram.Minutes / 60 + " "; ;
                            Surfed.Text = "" + dry.surfed;
                            oldSiteId = dry.value;
                            oldSeconds = dry.seconds;
                            ProgramVars.stat = "Connected";
                            ProgramVars.minutes = drx.minutes;
                            ProgramVars.surfed = "" + dry.surfed;
                            ProgramVars.type = drx.type;
                            ProgramVars.ratioTxt = ProgramVars.type == 0 ? 70 : 100;
                            ProgramVars.typeTxt = ProgramVars.type == 0 ? "Normal Shark" : "Super Shark";
                            MemberTypExd.Text = ProgramVars.typeTxt;
                        }

                    }
                    break;
                case 2: //Loaded URLS
                    DefaultResponse drexe = JsonConvert.DeserializeObject<DefaultResponse>(value);
                    if (drexe != null)
                    {
                        if (drexe.value == 1)
                        {
                            if (cmd == 1 || cmd == 0)
                            {
                                string jsonString = Encrypt.Decode(drexe.message);
                                if (jsonString.Length > 5)
                                {
                                    ProgramVars.siteClasses = JsonConvert.DeserializeObject<List<SiteClass>>(jsonString);
                                }
                                Forms.main.Invoke(new MethodInvoker(delegate ()
                                {
                                    UrlUtilityForm form2 = new UrlUtilityForm();
                                    form2.Show();
                                    CoreSystem.Resize_window();
                                    isUtilOpen = true;
                                }));
                            }
                            else
                            {
                                Forms.main.Invoke(new MethodInvoker(delegate ()
                                {
                                    UrlUtilityForm.LoginDialogInstance.PopulateList();
                                }));
                            }
                        }

                    }
                    break;
                case 3:
                    DefaultResponse defRes = JsonConvert.DeserializeObject<DefaultResponse>(value);
                    if (cmd == 3)
                    {
                        string jsonStringx = Encrypt.Decode(defRes.message);
                        if (jsonStringx.Length > 5)
                        {
                           // ProgramVars.chatList = JsonConvert.DeserializeObject<List<ChatResponse>>(jsonStringx);
                        }
                        Forms.main.Invoke(new MethodInvoker(delegate ()
                        {
                            if (!Forms.chat.IsDisposed)
                            {
                                Forms.chat.StartPosition = FormStartPosition.Manual;
                                Forms.chat.Location = new Point(Screen.PrimaryScreen.WorkingArea.Width - Forms.chat.Width,
                                                       Screen.PrimaryScreen.WorkingArea.Height - Forms.chat.Height);
                                Forms.chat.Show();
                            }
                            else
                            {
                                Forms.chat = new ChatWindow();
                                Forms.chat.StartPosition = FormStartPosition.Manual;
                                Forms.chat.Location = new Point(Screen.PrimaryScreen.WorkingArea.Width - Forms.chat.Width,
                                                       Screen.PrimaryScreen.WorkingArea.Height - Forms.chat.Height);
                                Forms.chat.Show();
                                chatLoaded = false;
                            }
                            Forms.chat.LoadAll();
                            if (CoreSystem.startedToSurf)
                            {
                                CoreSystem.Resize_window();
                            }
                        }));
                    }
                    if (cmd == 0)
                    {
                        if (CoreSystem.chatEnabled)
                        {
                            Forms.main.Invoke(new MethodInvoker(delegate ()
                            {
                                if (!Forms.chat.IsDisposed)
                                {
                                    Forms.chat.StartPosition = FormStartPosition.Manual;
                                    Forms.chat.Location = new Point(Screen.PrimaryScreen.WorkingArea.Width - Forms.chat.Width,
                                                           Screen.PrimaryScreen.WorkingArea.Height - Forms.chat.Height);
                                    Forms.chat.Show();
                                }
                                else
                                {
                                    Forms.chat = new ChatWindow();
                                    Forms.chat.StartPosition = FormStartPosition.Manual;
                                    Forms.chat.Location = new Point(Screen.PrimaryScreen.WorkingArea.Width - Forms.chat.Width,
                                                           Screen.PrimaryScreen.WorkingArea.Height - Forms.chat.Height);
                                    Forms.chat.Show();
                                    chatLoaded = false;
                                }
                                string jsonStringx = Encrypt.Decode(defRes.message);
                                if (jsonStringx.Length > 5)
                                {
                                //    ProgramVars.chatList = JsonConvert.DeserializeObject<List<ChatResponse>>(jsonStringx);
                                }
                                CoreSystem.canSendChat = true;
                                Forms.chat.LoadAll();
                            }));
                        }
                    }
                    break;
                default:
                    DefaultResponse drxz = JsonConvert.DeserializeObject<DefaultResponse>(value);
                    if (drxz != null)
                    {
                        MessageBox.Show(drxz.message);
                    }
                    break;
            }
            this.Refresh();

        }
